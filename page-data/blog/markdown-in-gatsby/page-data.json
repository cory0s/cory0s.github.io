{"componentChunkName":"component---src-templates-project-template-js","path":"/blog/markdown-in-gatsby","webpackCompilationHash":"a8ce9fb26ec35c0d2065","result":{"data":{"markdownRemark":{"html":"<h2>Rendering Markdown in Gatsby</h2>\n<hr>\n<p>A powerful feature of the JAMstack approach to development is the usage of dynamically rendered markdown files. This enables developers to create page content from simple text files which can be created/edited by their clients. This gives the client flexibility in editing their sites and avoids any need for changes to the page's HTML. In this post I will highlight how to accomplish this with your own GatsbyJS website.</p>\n<h2>Gatsby Features</h2>\n<hr>\n<p>Gatsby is a static site generator layered on top of React. It offers the speed and performance of a preloaded static site, but still enables the rich dynamic experience of your typical React application. It also comes with some pretty neat plugins which make markdown injection into your website a breeze.</p>\n<p>In order to read in content files (.md) we will need to use two Gatsby plugins. First we will need to install two packages:    </p>\n<p><code class=\"language-text\">npm install gatsby-transformer-remark gatsby-source-filesystem</code>    </p>\n<p> The filesystem will enable us to target where our desired content is stored and the transformer-remark plugin will create node objects for each content/.md file it finds in the locations specified by the filesystem. Once the content nodes are created, we can query for the markdown data upfront using GraphQL, and inject it into our React components.</p>\n<h2>Setting up gatsby-source-filesystem</h2>\n<hr>\n<p>In our gatsby-config.js folder, we can specify where we want our filesystem to search. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-source-filesystem</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">images</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src/images</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-source-filesystem</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">content</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/content</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>The above script will tell our filesystem to create directories for our images and content which will tell the markdown transformer where to look for content files. After scrubbing these filepaths for relevant file types, the transformer will create a node object for each file which can then be queried and used in our React components.</p>\n<h2>Querying Resources into a Template</h2>\n<hr>\n<p>A simple example of how to implement this \"injection\" was used to generate project pages for this website.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/layout.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./project-template.scss'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Template</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> project <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>markdownRemark<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>__html<span class=\"token punctuation\">:</span> project<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> Layout<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> projectQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query ProjectByPath($path: String!){\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            frontmatter{\n                path\n                title\n            }\n        }\n    }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>In the above code snippet, I create a generic template used to render each project post. The template is a div element which we can inject data from the content nodes created by the markdown transformer.  Let's take a closer look at the GraphQL query:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> projectQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query ProjectByPath($path: String!){\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            frontmatter{\n                path\n                title\n            }\n        }\n    }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>We are creating a GraphQL query, ProjectByPath, which will be executed at build time. The markdown transformer creates markdownRemark objects containing relevant information from our markdown files. In the above query, I am creating individual data requests for each path found in my content directory. The object frontmatter contains basic information about the post which I will use to create the page title and path. In addition, the html attribute creates preformatted HTML which can be directly injected into my template. Once the query is complete, the Template component can utilize the data to dynamically create page content:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Template</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> project <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>markdownRemark<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>div dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>__html<span class=\"token punctuation\">:</span> project<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> Layout<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Creating pages from Templates</h2>\n<hr>\n<p>The final step in the process is utilizing your created templates to create new page routes. To do this, we need to execute a script in the gatsby-node.js file which should live in the root of your directory. In the gatsby-node.js file, the following script will use Gatsby's createPages() function to dynamically create pages from your markdown.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>actions<span class=\"token punctuation\">,</span> graphql<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>createPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> projectTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/templates/project-template.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This pulls in the createPage and graphql functions from Gatsby along with the project tempate we created earlier. Next, we want to make a GraphQL query and pull in our page content. The gatsby-transformer-remark plugin will store our markdown a node called allMarkdownRemark.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>actions<span class=\"token punctuation\">,</span> graphql<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>createPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> projectTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/templates/project-template.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{\n        allMarkdownRemark{\n            edges{\n                node{\n                    html\n                    id\n                    frontmatter{\n                        title\n                        path\n                    }\n                }\n            }\n        }\n    }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                path<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n                component<span class=\"token punctuation\">:</span> projectTemplate<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Once we receive the response object from our GraphQL query, we can pull out the edges attribute of the allMarkdownRemark object. This will be an array containing node objects for each markdown file found. Finally, we can call the createPage() function using each node's path and the desired rendered componenet. The desired path (i.e. /blog, /projects, etc.) should be specified at the top of each markdown file. This can be done by simply adding the line <code class=\"language-text\">path: /desiredpathname</code> to the top of your markdown page as seen below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\ntitle<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Markdown in GatsbyJS\"</span>\npath<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/blog/markdown-in-gatsby\"</span>\ndate<span class=\"token punctuation\">:</span> <span class=\"token string\">\"8/22/2019\"</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span></code></pre></div>","frontmatter":{"path":"/blog/markdown-in-gatsby","title":"Markdown in GatsbyJS"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}